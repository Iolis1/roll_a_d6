<!-- app/views/character_data/index.html.erb -->

<div class="container mx-auto p-8 bg-white custom-bg-opacity rounded shadow-lg mt-10 relative z-10">
  <h1 class="text-3xl font-bold text-center mb-6">Character Data</h1>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 bg-blue-50 p-4 rounded">

    <!-- Ability Scores Dropdown -->
    <div class="bg-white bg-opacity-75 p-4 border border-gray-200 rounded-md shadow">
      <label for="ability_scores" class="font-bold">Ability Scores:</label>
      <select id="ability_scores" name="ability_scores" onchange="fetchData('ability_scores', this.value)" class="block w-full p-2 bg-white border border-gray-300 rounded-md">
        <option value="">Select an Ability Score</option>
        <% %w[cha con dex int str wis].each do |score| %>
          <option value="<%= score %>"><%= score.upcase %></option>
        <% end %>
      </select>
      <div id="ability_scores_data" class="hidden mt-2 p-2 bg-gray-100 border rounded-md">
        <!-- Fetched data will appear here -->
      </div>
    </div>

    <!-- Skills Dropdown -->
    <div class="bg-white bg-opacity-75 p-4 border border-gray-200 rounded-md shadow">
      <label for="skills" class="font-bold">Skills:</label>
      <select id="skills" name="skills" onchange="fetchData('skills', this.value)" class="block w-full p-2 bg-white border border-gray-300 rounded-md">
        <option value="">Select a Skill</option>
        <% %w[acrobatics animal-handling arcana athletics deception history insight intimidation investigation medicine nature perception performance persuasion religion sleight-of-hand stealth survival].each do |skill| %>
          <option value="<%= skill %>"><%= skill.humanize.titleize %></option>
        <% end %>
      </select>
      <div id="skills_data" class="hidden mt-2 p-2 bg-gray-100 border rounded-md">
        <!-- Fetched data will appear here -->
      </div>
    </div>

    <!-- Proficiencies Dropdown-->
    <div class="bg-white bg-opacity-75 p-4 border border-gray-200 rounded-md shadow">
      <label for="proficiencies" class="font-bold">Proficiencies:</label>
      <select id="proficiencies" name="proficiencies" onchange="fetchData('proficiencies', this.value)" class="block w-full p-2 bg-white border border-gray-300 rounded-md">
        <option value="">Select a Proficiency</option>
        <% %w[armor weapons tools].each do |proficiency| %>
          <option value="<%= proficiency %>"><%= proficiency.titleize %></option>
        <% end %>
      </select>
      <div id="proficiencies_data" class="hidden mt-2 p-2 bg-gray-100 border rounded-md">
        <!-- Fetched data will appear here -->
      </div>
    </div>

    <!-- Languages Dropdown -->
    <div class="bg-white bg-opacity-75 p-4 border border-gray-200 rounded-md shadow">
      <label for="languages" class="font-bold">Languages:</label>
      <select id="languages" name="languages" onchange="fetchData('languages', this.value)" class="block w-full p-2 bg-white border border-gray-300 rounded-md">
        <option value="">Select a Language</option>
        <% %w[abyssal celestial common deep-speech draconic dwarvish elvish giant gnomish goblin halfling infernal orc primordial sylvan undercommon].each do |language| %>
          <option value="<%= language %>"><%= language.humanize.titleize %></option>
        <% end %>
      </select>
      <div id="languages_data" class="hidden mt-2 p-2 bg-gray-100 border rounded-md">
        <!-- Fetched data will appear here -->
      </div>
    </div>

    <!-- Alignments -->
    <div class="bg-white bg-opacity-75 p-4 border border-gray-200 rounded-md shadow">
      <label for="alignments" class="font-bold">Alignments:</label>
      <select id="alignments" name="alignments" onchange="fetchData('alignments', this.value)" class="block w-full p-2 bg-white border border-gray-300 rounded-md">
        <option value="">Select an Alignment</option>
        <% %w[chaotic-neutral chaotic-evil chaotic-good lawful-neutral lawful-evil lawful-good neutral neutral-evil neutral-good].each do |alignment| %>
          <option value="<%= alignment %>"><%= alignment.humanize.titleize %></option>
        <% end %>
      </select>
      <div id="alignments_data" class="hidden mt-2 p-2 bg-gray-100 border rounded-md">
        <!-- Fetched data will appear here -->
      </div>
    </div>

    <!-- Backgrounds Dropdown -->
    <div class="bg-white bg-opacity-75 p-4 border border-gray-200 rounded-md shadow">
      <label for="backgrounds" class="font-bold">Backgrounds:</label>
      <select id="backgrounds" name="backgrounds" onchange="fetchData('backgrounds', this.value)" class="block w-full p-2 bg-white border border-gray-300 rounded-md">
        <option value="">Select a Background</option>
        <% %w[acolyte].each do |background| %>
          <option value="<%= background %>"><%= background.humanize %></option>
        <% end %>
      </select>
      <div id="backgrounds_data" class="hidden mt-2 p-2 bg-gray-100 border rounded-md">
        <!-- Fetched data will appear here -->
      </div>
    </div>

    <!-- Go Back Button-->
    <div class="bg-white bg-opacity-75 p-4 border border-gray-200 rounded-md shadow">
      <a href="<%= url_for(:back) %>" class="block w-full p-2 bg-blue-500 text-white font-bold text-center rounded-md">Go Back</a>
    </div>
  </div>
</div>

<script>
  function fetchData(category, index) {
    if (index === "") {
      document.getElementById(`${category}_data`).innerHTML = '';
      document.getElementById(`${category}_data`).classList.add('hidden');
      return;
    }

    fetch(`/api/${category}/${index}`)
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then(data => {
        document.getElementById(`${category}_data`).classList.remove('hidden');
        const htmlContent = generateHtmlForData(data);
        document.getElementById(`${category}_data`).innerHTML = htmlContent;
      })
      .catch(error => {
        console.error('Fetch error:', error);
        document.getElementById(`${category}_data`).innerHTML = 'Error fetching data.';
      });
  }

  function generateHtmlForData(data) {
  let htmlContent = '';
  for (const key in data) {
    if (data.hasOwnProperty(key)) {
      // Skip URL/URI keys and others as needed
      if (key.toLowerCase().includes('url') || key.toLowerCase().includes('uri') || key.toLowerCase().includes('index') || key.toLowerCase().includes('id')) {
        continue;
      }

      // Check if the value exists and is not null or undefined
      if (data[key] !== null && data[key] !== undefined) {
        // Check if the value is an array
        if (Array.isArray(data[key])) {
          if (data[key].length > 0) {
            htmlContent += `<p><strong>${key.toUpperCase()}:</strong></p>`;
            htmlContent += '<ul>';
            data[key].forEach(item => {
              // Handle nested objects or arrays recursively
              if (typeof item === 'object') {
                htmlContent += '<li>';
                htmlContent += generateHtmlForData(item);
                htmlContent += '</li>';
              } else {
                htmlContent += `<li>${item}</li>`;
              }
            });
            htmlContent += '</ul>';
          }
        } else if (typeof data[key] === 'object') {
          // Check if the object has properties
          if (Object.keys(data[key]).length > 0) {
            // Handle nested objects recursively
            htmlContent += `<p><strong>${key.toUpperCase()}:</strong></p>`;
            htmlContent += generateHtmlForData(data[key]);
          }
        } else {
          // Check if the value is not an empty string
          if (data[key] !== '') {
            htmlContent += `<p><strong>${key.toUpperCase()}:</strong> ${data[key]}</p>`;
          }
        }
      }
    }
  }
  return htmlContent;
}
</script>
