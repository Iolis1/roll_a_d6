<!-- app/views/characters/show.html.erb -->
<div class="container mx-auto p-8 bg-white custom-bg-opacity rounded shadow-lg mt-10 relative z-10">
  <h1 class="text-3xl font-bold text-center mb-6">Character Profile For <%= @character.name %></h1>

  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    <div class="col-span-full md:col-span-1 bg-white bg-opacity-75 p-4 border border-gray-200 rounded-md shadow">
      <h2 class="text-lg font-bold">Basic Information</h2>
      <p><strong>Race:</strong> <%= @character.race&.capitalize %></p>
      <p><strong>Class:</strong> <%= @character.char_class&.capitalize %></p>
      <p><strong>Level:</strong> <%= @character.level %></p>

    </div>

    <!-- Example attributes section, adjust field names as needed -->
    <div class="col-span-full md:col-span-2 bg-white bg-opacity-75 p-4 border border-gray-200 rounded-md shadow">
      <h2 class="text-lg font-bold">Attributes</h2>
      <p><strong>Strength:</strong> <%= @character.strength %></p>
      <p><strong>Dexterity:</strong> <%= @character.dexterity %></p>
      <p><strong>Constitution:</strong> <%= @character.constitution %></p>
      <p><strong>Intelligence:</strong> <%= @character.intelligence %></p>
      <p><strong>Wisdom:</strong> <%= @character.wisdom %></p>
      <p><strong>Charisma:</strong> <%= @character.charisma %></p>
    </div>

    <!-- Character race description and char_class Descriptions from API -->
    <div class="col-span-full md:col-span-2 bg-white bg-opacity-75 p-4 border border-gray-200 rounded-md shadow">
      <h2 class="text-lg font-bold">Character Descriptions</h2>
      <div id="races_data" class="hidden"></div>
      <div id="classes_data" class="hidden"></div>
    </div>

  </div>

  <div class="text-center mt-6">
    <a href="<%= edit_character_path(@character) %>" class="btn btn-primary bg-blue-500 text-white font-bold text-center rounded-md">Level Up</a>
    <a href="<%= characters_path %>" class="btn btn-secondary bg-blue-500 text-white font-bold text-center rounded-md">Back to List</a>
  </div>
</div>

<script>
   document.addEventListener("DOMContentLoaded", function(){
        console.log("Character race: ", '<%= @character.race %>');
        console.log("Character class: ", '<%= @character.char_class %>');
        fetchData('races', '<%= @character.race %>');
        fetchData('classes', '<%= @character.char_class %>');
        
      });
  function fetchData(category, index) {
    if (index === "") {
      document.getElementById(`${category}_data`).innerHTML = '';
      document.getElementById(`${category}_data`).classList.add('hidden');
      return;
    }

    fetch(`/api/${category}/${index}`)
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then(data => {
        document.getElementById(`${category}_data`).classList.remove('hidden');
        const htmlContent = generateHtmlForData(data);
        document.getElementById(`${category}_data`).innerHTML = htmlContent;
      })
      .catch(error => {
        console.error('Fetch error:', error);
        document.getElementById(`${category}_data`).innerHTML = 'Error fetching data.';
      });
  }

  function generateHtmlForData(data) {
  let htmlContent = '';
  for (const key in data) {
    if (data.hasOwnProperty(key)) {
      // Skip URL/URI keys and others as needed
      if (key.toLowerCase().includes('url') || key.toLowerCase().includes('uri') || key.toLowerCase().includes('index') || key.toLowerCase().includes('id')) {
        continue;
      }

      // Check if the value exists and is not null or undefined
      if (data[key] !== null && data[key] !== undefined) {
        // Check if the value is an array
        if (Array.isArray(data[key])) {
          if (data[key].length > 0) {
            htmlContent += `<p><strong>${key.toUpperCase()}:</strong></p>`;
            htmlContent += '<ul>';
            data[key].forEach(item => {
              // Handle nested objects or arrays recursively
              if (typeof item === 'object') {
                htmlContent += '<li>';
                htmlContent += generateHtmlForData(item);
                htmlContent += '</li>';
              } else {
                htmlContent += `<li>${item}</li>`;
              }
            });
            htmlContent += '</ul>';
          }
        } else if (typeof data[key] === 'object') {
          // Check if the object has properties
          if (Object.keys(data[key]).length > 0) {
            // Handle nested objects recursively
            htmlContent += `<p><strong>${key.toUpperCase()}:</strong></p>`;
            htmlContent += generateHtmlForData(data[key]);
          }
        } else {
          // Check if the value is not an empty string
          if (data[key] !== '') {
            htmlContent += `<p><strong>${key.toUpperCase()}:</strong> ${data[key]}</p>`;
          }
        }
      }
    }
  }
  return htmlContent;
}
</script>